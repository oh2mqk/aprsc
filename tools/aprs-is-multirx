#!/usr/bin/perl 

$VERSION = 'APRS-IS-MULTIRX 1.0';

use POSIX;
use IO::Multiplex;
use Ham::APRS::IS;

select STDOUT; $| = 1;    

my $quit = 0;
my $APRSIS;

my $mycall = $ARGV[0] . '-';
#my $filter = 'p/OH2R';
#my $filter = 'p/OH';
my $filter = 'p/OH2R -p/OH2 p/OH ';
$filter = 'p/OH/OI/OJ/OF';

my @APRS = ();

my $n =  50;

my $MUX = new IO::Multiplex;

foreach my $i (1 .. $n) {
    my $call = sprintf("%s%d",$mycall,$i);
    if (($i % 3) == 0) { # filters only for 1/3'd of all contactees..
	$APRSIS = Ham::APRS::IS->new('localhost:55580', $call, filter => $filter );
#    } elsif (($i % 3) == 1) {
#	$call = sprintf("CW%04d",$i);
#	$APRSIS = Ham::APRS::IS->new('localhost:55152', $call);
    } else {
	$APRSIS = Ham::APRS::IS->new('localhost:55152', $call);
    }
    if (!defined($APRSIS)) {
	printf "Failed to init Ham::APRS::IS socket!\n";
	exit 4;
    }
    
    if (!$APRSIS->connect()) {
	printf "Failed to connect\n";
	exit 4;
    }
    
    $MUX->add( $APRSIS->{'sock'} );

    push @APRS, $APRSIS;
}
$MUX->set_callback_object(__PACKAGE__);
$MUX->loop();

#
#my $now = time;
#my $last = $now + 60*60;
#local $line;
#
#while (1) {
#    $now = time;
#    foreach my $A (@APRS) {
#	$line = $A->getline;
#    }
#}
exit 0;


sub mux_input {
    my $package = shift;
    my $mux     = shift;
    my $fh      = shift;
    my $data    = shift;

    $$data = '';
}


sub mux_eof {
    my $package = shift;
    my $mux     = shift;
    my $fh      = shift;

    $MUX->close($fh);
}

